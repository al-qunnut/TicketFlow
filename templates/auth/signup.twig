{% extends 'layout.twig' %}

{% block title %}Sign Up - TicketFlow{% endblock %}

{% block content %}
<div class="auth-container">
    <div class="auth-box">
        <h1>Create Account</h1>
        
        <form id="signupForm" method="POST" action="/signup">
            <div class="form-group">
                <label for="name" class="form-label required">Full Name</label>
                <input 
                    type="text" 
                    id="name" 
                    name="name" 
                    class="form-control" 
                    placeholder="John Doe"
                    required
                    autocomplete="name"
                >
                <span class="form-error" id="name-error"></span>
            </div>
            
            <div class="form-group">
                <label for="email" class="form-label required">Email Address</label>
                <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    class="form-control" 
                    placeholder="your@email.com"
                    required
                    autocomplete="email"
                >
                <span class="form-error" id="email-error"></span>
            </div>
            
            <div class="form-group">
                <label for="password" class="form-label required">Password</label>
                <input 
                    type="password" 
                    id="password" 
                    name="password" 
                    class="form-control" 
                    placeholder="At least 6 characters"
                    required
                    autocomplete="new-password"
                    minlength="6"
                >
                <span class="form-error" id="password-error"></span>
            </div>
            
            <div class="form-group">
                <label for="confirm_password" class="form-label required">Confirm Password</label>
                <input 
                    type="password" 
                    id="confirm_password" 
                    name="confirm_password" 
                    class="form-control" 
                    placeholder="Re-enter your password"
                    required
                    autocomplete="new-password"
                >
                <span class="form-error" id="confirm_password-error"></span>
            </div>
            
            <div id="form-errors" class="alert alert-error" style="display: none;"></div>
            
            <button type="submit" class="btn btn-primary btn-block">
                <span id="submit-text">Create Account</span>
                <span id="submit-loading" class="loading" style="display: none;"></span>
            </button>
        </form>
        
        <div class="auth-links">
            <p>Already have an account? <a href="/login">Sign in here</a></p>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.getElementById('signupForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Clear previous errors
    document.querySelectorAll('.form-error').forEach(el => el.textContent = '');
    document.querySelectorAll('.form-control').forEach(el => el.classList.remove('error'));
    document.getElementById('form-errors').style.display = 'none';
    
    // Client-side validation
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirm_password').value;
    
    if (password !== confirmPassword) {
        document.getElementById('confirm_password-error').textContent = 'Passwords do not match';
        document.getElementById('confirm_password').classList.add('error');
        return;
    }
    
    // Show loading
    document.getElementById('submit-text').style.display = 'none';
    document.getElementById('submit-loading').style.display = 'inline-block';
    
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/signup', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showToast('Account created successfully! Redirecting...', 'success');
            setTimeout(() => {
                window.location.href = data.redirect || '/dashboard';
            }, 1000);
        } else {
            // Show errors
            if (data.errors) {
                if (typeof data.errors === 'object' && !Array.isArray(data.errors)) {
                    Object.keys(data.errors).forEach(key => {
                        const errorEl = document.getElementById(key + '-error');
                        const inputEl = document.getElementById(key);
                        if (errorEl) errorEl.textContent = data.errors[key];
                        if (inputEl) inputEl.classList.add('error');
                    });
                } else {
                    const errorsDiv = document.getElementById('form-errors');
                    errorsDiv.textContent = Array.isArray(data.errors) ? data.errors.join(', ') : data.errors;
                    errorsDiv.style.display = 'block';
                }
            }
            showToast('Signup failed. Please check the errors.', 'error');
        }
    } catch (error) {
        showToast('An error occurred. Please try again.', 'error');
    } finally {
        document.getElementById('submit-text').style.display = 'inline';
        document.getElementById('submit-loading').style.display = 'none';
    }
});
</script>
{% endblock %}
